name: CI-CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  FLASK_APP: app.py
  VIRTUAL_ENV: .venv
  IMAGE_NAME: course-website
  IMAGE_TAG: v1
  ENVIRONMENT: dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: |
          python3 -m venv $VIRTUAL_ENV
          $VIRTUAL_ENV/bin/pip install --upgrade pip

      - name: Install dependencies
        run: |
          $VIRTUAL_ENV/bin/pip install -r requirements.txt
          $VIRTUAL_ENV/bin/pip install pytest pytest-html

      - name: Run unit tests and generate report
        run: |
          $VIRTUAL_ENV/bin/pytest --maxfail=1 --disable-warnings -q \
            --junitxml=pytest-report.xml \
            --html=pytest-report.html --self-contained-html

      - name: Upload Pytest Reports
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports
          path: |
            pytest-report.xml
            pytest-report.html

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          output: 'trivy-image-report.html'

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-image-report.html

      - name: Snyk Security Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Convert Snyk report to HTML
        run: |
          npm install -g snyk-to-html
          snyk-to-html -i snyk-report.json -o snyk-report.html

      - name: Upload Snyk Report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.html

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to Docker Hub
        run: |
          docker tag $IMAGE_NAME:$IMAGE_TAG manoharshetty507/$IMAGE_NAME:$IMAGE_TAG
          docker push manoharshetty507/$IMAGE_NAME:$IMAGE_TAG

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_FILE }}" > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: kubectl apply -f deployment.yaml
